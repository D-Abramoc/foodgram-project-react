# name: Django-app

# on: [push]
# jobs:
#   tests:
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checout@v3
#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: 3.10
    
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
#         pip install -r requirements.txt
    
#     - name: Test with flake8 and django tests
#       run: |
#         python -m flake8

name: foodgram CICD
# run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on: [push]
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      # - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      # - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      # - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      # - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      # - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      # - name: List files in the repository
      #   run: |
      #     ls ${{ github.workspace }}
      # - run: echo "🍏 This job's status is ${{ job.status }}."
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r ./backend/backend_foodgram/requirements.txt

      - name: Test with flake8 and django tests
        run: |
          python -m flake8

  build_and_push_to_docker_hub:
    if: ${{ github.ref == 'refs/heads/master' }}
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        # Пуш образа в Docker Hub 
        uses: docker/build-push-action@v2 
        with:
          push: true
          context: backend/backend_foodgram/
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_back:latest
          file: backend/backend_foodgram/Dockerfile
      - name: Push Frontend
        uses: docker/build-push-action@v2
        with:
          push: true
          context: frontend/
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_front:latest
          file: frontend/Dockerfile

  deploy:
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # if $(sudo docker container ls | wc -l) -gt 1
            # then sudo docker-compose stop && sudo docker-compose rm web
            # fi
            sudo docker-compose stop
            sudo docker-compose rm web
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            sudo docker-compose up -d
